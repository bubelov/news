import db.Link;
import java.time.OffsetDateTime;
import kotlin.collections.List;

CREATE TABLE Entry (
    content_type TEXT,
    content_src TEXT,
    content_text TEXT,
    links TEXT AS List<Link> NOT NULL,
    summary TEXT,
    id TEXT PRIMARY KEY NOT NULL,
    feed_id TEXT NOT NULL,
    title TEXT NOT NULL,
    published TEXT AS OffsetDateTime NOT NULL,
    updated TEXT AS OffsetDateTime NOT NULL,
    author_name TEXT NOT NULL,
    ext_read INTEGER AS Boolean NOT NULL,
    ext_read_synced INTEGER AS Boolean NOT NULL,
    ext_bookmarked INTEGER AS Boolean NOT NULL,
    ext_bookmarked_synced INTEGER AS Boolean NOT NULL,
    ext_nc_guid_hash TEXT NOT NULL,
    ext_comments_url TEXT NOT NULL,
    ext_og_image_checked INTEGER AS Boolean NOT NULL,
    ext_og_image_url TEXT NOT NULL,
    ext_og_image_width INTEGER NOT NULL,
    ext_og_image_height INTEGER NOT NULL
);

insertOrReplace:
INSERT OR REPLACE
INTO Entry(
    content_type,
    content_src,
    content_text,
    links,
    summary,
    id,
    feed_id,
    title,
    published,
    updated,
    author_name,
    ext_read,
    ext_read_synced,
    ext_bookmarked,
    ext_bookmarked_synced,
    ext_nc_guid_hash,
    ext_comments_url,
    ext_og_image_checked,
    ext_og_image_url,
    ext_og_image_width,
    ext_og_image_height
)
VALUES ?;

selectAll:
SELECT *
FROM Entry
ORDER BY published DESC;

selectAllLinksPublishedAndTitle:
SELECT links, published, title
FROM Entry
ORDER BY published DESC;

selectByIds:
SELECT id
FROM Entry
WHERE id IN :ids;

selectById:
SELECT *
FROM Entry
WHERE id = ?;

selectLinksById:
SELECT links
FROM Entry
WHERE id = ?;

selectByFeedIdAndReadAndBookmarked:
SELECT *
FROM EntriesAdapterRow e
WHERE e.feed_id = ?
AND e.ext_read IN ?
AND e.ext_bookmarked = ?
ORDER BY e.published DESC;

selectByReadAndBookmarked:
SELECT *
FROM EntriesAdapterRow e
WHERE e.ext_read IN ?
AND e.ext_bookmarked = ?
ORDER BY e.published DESC
LIMIT 500;

selectByReadSynced:
SELECT *
FROM EntryWithoutContent
WHERE ext_read_synced = ?
ORDER BY published DESC;

selectByBookmarked:
SELECT *
FROM EntryWithoutContent
WHERE ext_bookmarked = ?
ORDER BY published DESC;

selectByBookmarkedSynced:
SELECT *
FROM EntryWithoutContent
WHERE ext_bookmarked_synced = ?
ORDER BY published DESC;

selectByOgImageChecked:
SELECT *
FROM EntryWithoutContent
WHERE ext_og_image_checked = :ogImageChecked
ORDER BY published DESC
LIMIT :limit;

selectLinks:
SELECT links
FROM Entry;

selectCount:
SELECT COUNT(*)
FROM Entry;

selectMaxId:
SELECT MAX(id + 0) FROM Entry;

selectMaxUpdated:
SELECT MAX(updated)
FROM Entry;

updateReadByFeedId:
UPDATE Entry
SET ext_read = :read, ext_read_synced = 0
WHERE ext_read != :read AND feed_id = :feedId;

updateReadByBookmarked:
UPDATE Entry
SET ext_read = :read, ext_read_synced = 0
WHERE ext_read != :read AND ext_bookmarked = :bookmarked;

updateReadAndReadSynced:
UPDATE Entry
SET ext_read = ?, ext_read_synced = ?
WHERE id = ?;

updateReadSynced:
UPDATE Entry
SET ext_read_synced = ?
WHERE id = ?;

updateBookmarkedAndBookmaredSynced:
UPDATE Entry
SET ext_bookmarked = ?, ext_bookmarked_synced = ?
WHERE id = ?;

updateBookmarkedSynced:
UPDATE Entry
SET ext_bookmarked_synced = ?
WHERE id = ?;

updateOgImageChecked:
UPDATE Entry
SET ext_og_image_checked = ?
WHERE id = ?;

updateOgImage:
UPDATE Entry
SET ext_og_image_url = ?, ext_og_image_width = ?, ext_og_image_height = ?, ext_og_image_checked = 1
WHERE id = ?;

updateLinks:
UPDATE Entry
SET links = ?
WHERE id = ?;

deleteAll:
DELETE
FROM Entry;

deleteById:
DELETE
FROM Entry
WHERE id = ?;

deleteByFeedId:
DELETE
FROM Entry
WHERE feed_id = ?;